generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  username      String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  votes         Vote[]
  AnswerVote    AnswerVote[]
  Answer        Answer[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId   String   @db.ObjectId
  question Question @relation(fields: [postId], references: [id], onDelete: Cascade)
  type     VoteType

  @@unique([userId, postId])
}

model AnswerVote {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String   @db.ObjectId
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String   @db.ObjectId
  answer Answer   @relation(fields: [postId], references: [id], onDelete: Cascade)
  type   VoteType

  @@unique([userId, postId])
}

model Answer {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  content    Json
  votes      AnswerVote[]
  postedDate DateTime     @default(now())
  questionId String       @db.ObjectId
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  problemDetail Json
  triedMethods  Json
  tags          String
  votes         Vote[]
  postedDate    DateTime @default(now())
  postedBy      String   @db.ObjectId
  user          User     @relation(fields: [postedBy], references: [id], onDelete: Cascade)
  answers       Answer[]
}
